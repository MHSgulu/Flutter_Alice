// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:alice/model/written_jokes_entity.dart';
import 'package:alice/generated/json/written_jokes_entity_helper.dart';
import 'package:alice/model/gif_picture_jokes_entity.dart';
import 'package:alice/generated/json/gif_picture_jokes_entity_helper.dart';
import 'package:alice/model/picture_joke_entity.dart';
import 'package:alice/generated/json/picture_joke_entity_helper.dart';
import 'package:alice/model/mobie_phone_entity.dart';
import 'package:alice/generated/json/mobie_phone_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case WrittenJokesEntity:
			return writtenJokesEntityFromJson(data as WrittenJokesEntity, json) as T;			case WrittenJokesResult:
			return writtenJokesResultFromJson(data as WrittenJokesResult, json) as T;			case WrittenJokesResultShowapiResBody:
			return writtenJokesResultShowapiResBodyFromJson(data as WrittenJokesResultShowapiResBody, json) as T;			case WrittenJokesResultShowapiResBodyContentlist:
			return writtenJokesResultShowapiResBodyContentlistFromJson(data as WrittenJokesResultShowapiResBodyContentlist, json) as T;			case GifPictureJokesEntity:
			return gifPictureJokesEntityFromJson(data as GifPictureJokesEntity, json) as T;			case GifPictureJokesResult:
			return gifPictureJokesResultFromJson(data as GifPictureJokesResult, json) as T;			case GifPictureJokesResultShowapiResBody:
			return gifPictureJokesResultShowapiResBodyFromJson(data as GifPictureJokesResultShowapiResBody, json) as T;			case GifPictureJokesResultShowapiResBodyContentlist:
			return gifPictureJokesResultShowapiResBodyContentlistFromJson(data as GifPictureJokesResultShowapiResBodyContentlist, json) as T;			case PictureJokeEntity:
			return pictureJokeEntityFromJson(data as PictureJokeEntity, json) as T;			case PictureJokeResult:
			return pictureJokeResultFromJson(data as PictureJokeResult, json) as T;			case PictureJokeResultShowapiResBody:
			return pictureJokeResultShowapiResBodyFromJson(data as PictureJokeResultShowapiResBody, json) as T;			case PictureJokeResultShowapiResBodyContentlist:
			return pictureJokeResultShowapiResBodyContentlistFromJson(data as PictureJokeResultShowapiResBodyContentlist, json) as T;			case MobiePhoneEntity:
			return mobiePhoneEntityFromJson(data as MobiePhoneEntity, json) as T;			case MobiePhoneResult:
			return mobiePhoneResultFromJson(data as MobiePhoneResult, json) as T;			case MobiePhoneResultResult:
			return mobiePhoneResultResultFromJson(data as MobiePhoneResultResult, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case WrittenJokesEntity:
			return writtenJokesEntityToJson(data as WrittenJokesEntity);			case WrittenJokesResult:
			return writtenJokesResultToJson(data as WrittenJokesResult);			case WrittenJokesResultShowapiResBody:
			return writtenJokesResultShowapiResBodyToJson(data as WrittenJokesResultShowapiResBody);			case WrittenJokesResultShowapiResBodyContentlist:
			return writtenJokesResultShowapiResBodyContentlistToJson(data as WrittenJokesResultShowapiResBodyContentlist);			case GifPictureJokesEntity:
			return gifPictureJokesEntityToJson(data as GifPictureJokesEntity);			case GifPictureJokesResult:
			return gifPictureJokesResultToJson(data as GifPictureJokesResult);			case GifPictureJokesResultShowapiResBody:
			return gifPictureJokesResultShowapiResBodyToJson(data as GifPictureJokesResultShowapiResBody);			case GifPictureJokesResultShowapiResBodyContentlist:
			return gifPictureJokesResultShowapiResBodyContentlistToJson(data as GifPictureJokesResultShowapiResBodyContentlist);			case PictureJokeEntity:
			return pictureJokeEntityToJson(data as PictureJokeEntity);			case PictureJokeResult:
			return pictureJokeResultToJson(data as PictureJokeResult);			case PictureJokeResultShowapiResBody:
			return pictureJokeResultShowapiResBodyToJson(data as PictureJokeResultShowapiResBody);			case PictureJokeResultShowapiResBodyContentlist:
			return pictureJokeResultShowapiResBodyContentlistToJson(data as PictureJokeResultShowapiResBodyContentlist);			case MobiePhoneEntity:
			return mobiePhoneEntityToJson(data as MobiePhoneEntity);			case MobiePhoneResult:
			return mobiePhoneResultToJson(data as MobiePhoneResult);			case MobiePhoneResultResult:
			return mobiePhoneResultResultToJson(data as MobiePhoneResultResult);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'WrittenJokesEntity':
			return WrittenJokesEntity().fromJson(json);			case 'WrittenJokesResult':
			return WrittenJokesResult().fromJson(json);			case 'WrittenJokesResultShowapiResBody':
			return WrittenJokesResultShowapiResBody().fromJson(json);			case 'WrittenJokesResultShowapiResBodyContentlist':
			return WrittenJokesResultShowapiResBodyContentlist().fromJson(json);			case 'GifPictureJokesEntity':
			return GifPictureJokesEntity().fromJson(json);			case 'GifPictureJokesResult':
			return GifPictureJokesResult().fromJson(json);			case 'GifPictureJokesResultShowapiResBody':
			return GifPictureJokesResultShowapiResBody().fromJson(json);			case 'GifPictureJokesResultShowapiResBodyContentlist':
			return GifPictureJokesResultShowapiResBodyContentlist().fromJson(json);			case 'PictureJokeEntity':
			return PictureJokeEntity().fromJson(json);			case 'PictureJokeResult':
			return PictureJokeResult().fromJson(json);			case 'PictureJokeResultShowapiResBody':
			return PictureJokeResultShowapiResBody().fromJson(json);			case 'PictureJokeResultShowapiResBodyContentlist':
			return PictureJokeResultShowapiResBodyContentlist().fromJson(json);			case 'MobiePhoneEntity':
			return MobiePhoneEntity().fromJson(json);			case 'MobiePhoneResult':
			return MobiePhoneResult().fromJson(json);			case 'MobiePhoneResultResult':
			return MobiePhoneResultResult().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'WrittenJokesEntity':
			return List<WrittenJokesEntity>();			case 'WrittenJokesResult':
			return List<WrittenJokesResult>();			case 'WrittenJokesResultShowapiResBody':
			return List<WrittenJokesResultShowapiResBody>();			case 'WrittenJokesResultShowapiResBodyContentlist':
			return List<WrittenJokesResultShowapiResBodyContentlist>();			case 'GifPictureJokesEntity':
			return List<GifPictureJokesEntity>();			case 'GifPictureJokesResult':
			return List<GifPictureJokesResult>();			case 'GifPictureJokesResultShowapiResBody':
			return List<GifPictureJokesResultShowapiResBody>();			case 'GifPictureJokesResultShowapiResBodyContentlist':
			return List<GifPictureJokesResultShowapiResBodyContentlist>();			case 'PictureJokeEntity':
			return List<PictureJokeEntity>();			case 'PictureJokeResult':
			return List<PictureJokeResult>();			case 'PictureJokeResultShowapiResBody':
			return List<PictureJokeResultShowapiResBody>();			case 'PictureJokeResultShowapiResBodyContentlist':
			return List<PictureJokeResultShowapiResBodyContentlist>();			case 'MobiePhoneEntity':
			return List<MobiePhoneEntity>();			case 'MobiePhoneResult':
			return List<MobiePhoneResult>();			case 'MobiePhoneResultResult':
			return List<MobiePhoneResultResult>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}